@model ToDo.Application.DTOs.UserDto
@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard - ToDoApp</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/css/toastr.min.css" />
    <link rel="stylesheet" href="~/css/boards.css">
</head>
<body>
    <div class="animated-bg"></div>
    <button class="mobile-menu-toggle" onclick="toggleSidebar()">
        <i class="fas fa-bars"></i>
    </button>

    <div class="dashboard-layout">
        <!-- Sidebar -->
        <aside class="sidebar" id="sidebar">
            <div class="sidebar-brand">
                <i class="fas fa-check-circle brand-icon"></i>
                <span class="brand-name">ToDoApp</span>
            </div>

            <div class="sidebar-section">
                <h3 class="section-title">Navigation</h3>
                <ul class="category-list">
                    <li class="category-item">
                        <a href="#" class="category-link active">
                            <div class="category-info">
                                <i class="fas fa-home"></i>
                                <span>Dashboard</span>
                            </div>
                        </a>
                    </li>
                </ul>
            </div>

            <div class="sidebar-section">
                <h3 class="section-title">Categories</h3>
                <ul class="category-list">
                    @foreach (var category in Model.Categories)
                    {
                        <li class="category-item">
                            <a asp-action="Boards" asp-controller="Main" asp-route-categoryId="@category.Id" class="category-link">
                                <div class="category-info">
                                    <span class="category-icon" style="background: #667eea;"></span>
                                    <span>@category.Name</span>
                                </div>
                                <div class="category-right">
                                    <span class="category-count">@category.Boards.Count</span>
                                    <button class="category-menu-btn" onclick="toggleDropdown(event, @category.Id)">⋮</button>
                                </div>
                            </a>
                            <div class="category-dropdown" id="dropdown-@category.Id">
                                <button class="dropdown-item" onclick="editCategory(@category.Id, '@category.Name')">
                                    <i class="fa fa-pencil"></i>
                                    <span>Edit</span>
                                </button>
                                <div class="dropdown-divider"></div>
                                <button class="dropdown-item delete" onclick="deleteCategory(@category.Id, '@category.Name')">
                                    <i class="fa fa-trash"></i>
                                    <span>Delete</span>
                                </button>
                            </div>
                        </li>
                    }
                </ul>
            </div>
            <button type="button" class="btn add-category-btn" onclick="openCategoryModal()"><i class="fas fa-plus"></i>New Category</button>

            <div class="sidebar-section">
                <h3 class="section-title">Quick Actions</h3>
                <form asp-action="Logout" asp-controller="Account" method="post">
                    <button class="btn add-category-btn" style="margin-top: 0;"><i class="fa fa-sign-out "></i>Logout</button>
                </form>
            </div>

            <div class="user-profile">
                <div class="user-avatar">@Model.Username.Substring(0, 2).ToUpper()</div>
                <div class="user-info">
                    <h4>@Model.Username</h4>
                    <p>@Model.Email</p>
                </div>
            </div>
        </aside>

        <!-- Main Content -->
        <main class="main-content">
            @{
                var selectedCategoryId = ViewBag.CategoryId ?? Model.Categories.FirstOrDefault()?.Id;
                var selectedCategory = Model.Categories.FirstOrDefault(c => c.Id == selectedCategoryId);
            }

            @if (selectedCategory != null)
            {
                <!-- Header - Her zaman göster -->
                <header class="dashboard-header">
                    <div class="header-left">
                        @if (selectedCategory.Boards.Any())
                        {
                            <h1>@selectedCategory.Boards.FirstOrDefault()?.Title</h1>
                        }
                        else
                        {
                            <h1>@selectedCategory.Name</h1>
                            <p style="color: #94a3b8; margin-top: 0.5rem;">No boards yet. Create your first board!</p>
                        }
                    </div>
                    <div class="header-right">
                        <button class="btn btn-primary"><i class="fas fa-plus"></i> New Board </button>
                    </div>
                </header>

                @await Html.PartialAsync("_Notification")

                @if (selectedCategory.Boards.Any())
                {
                    @foreach (var board in selectedCategory.Boards)
                    {

                        <!-- Kanban Board -->
                        <div class="kanban-board">
                            <!-- To Do Column -->
                            <div class="kanban-column">
                                <div class="column-header">
                                    <div class="column-title">
                                        <h3>To Do</h3>
                                        <span class="column-badge">@board.Tasks.Count(t => t.Status.Equals("To Do", StringComparison.OrdinalIgnoreCase) || t.Status.Equals("ToDo", StringComparison.OrdinalIgnoreCase) || t.Status.Equals("Pending", StringComparison.OrdinalIgnoreCase))</span>
                                    </div>
                                </div>

                                <div class="task-list">
                                    @foreach (var task in board.Tasks.Where(t => t.Status.Equals("To Do", StringComparison.OrdinalIgnoreCase) || t.Status.Equals("ToDo", StringComparison.OrdinalIgnoreCase) || t.Status.Equals("Pending", StringComparison.OrdinalIgnoreCase)))
                                    {
                                        <div class="task-card">
                                            <div class="task-header">
                                                <span class="task-priority priority-high"></span>
                                                <button class="task-menu"><i class="fas fa-ellipsis-h"></i></button>
                                            </div>
                                            <h4 class="task-title">@task.Title</h4>
                                            <p class="task-description">@task.Description</p>
                                            <div class="task-footer">
                                                <div class="task-tags">
                                                    @if (!string.IsNullOrEmpty(task.Tag))
                                                    {
                                                        <span class="task-tag">@task.Tag</span>
                                                    }
                                                </div>
                                                <div class="task-meta">
                                                    @if (task.DueDate.HasValue)
                                                    {
                                                        <span><i class="far fa-calendar"></i> @task.DueDate.Value.ToString("MMM dd")</span>
                                                    }
                                                    <div class="task-assignee">@Model.Username.Substring(0, 2).ToUpper()</div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>

                                <button class="add-task-btn"><i class="fas fa-plus"></i> Add Task</button>
                            </div>

                            <!-- In Progress Column -->
                            <div class="kanban-column">
                                <div class="column-header">
                                    <div class="column-title">
                                        <h3>In Progress</h3>
                                        <span class="column-badge">@board.Tasks.Count(t => t.Status.Equals("In Progress", StringComparison.OrdinalIgnoreCase) || t.Status.Equals("InProgress", StringComparison.OrdinalIgnoreCase))</span>
                                    </div>
                                </div>

                                <div class="task-list">
                                    @foreach (var task in board.Tasks.Where(t => t.Status.Equals("In Progress", StringComparison.OrdinalIgnoreCase) || t.Status.Equals("InProgress", StringComparison.OrdinalIgnoreCase)))
                                    {
                                        <div class="task-card">
                                            <div class="task-header">
                                                <span class="task-priority priority-high"></span>
                                                <button class="task-menu"><i class="fas fa-ellipsis-h"></i></button>
                                            </div>
                                            <h4 class="task-title">@task.Title</h4>
                                            <p class="task-description">@task.Description</p>
                                            <div class="task-footer">
                                                <div class="task-tags">
                                                    @if (!string.IsNullOrEmpty(task.Tag))
                                                    {
                                                        <span class="task-tag">@task.Tag</span>
                                                    }
                                                </div>
                                                <div class="task-meta">
                                                    @if (task.DueDate.HasValue)
                                                    {
                                                        <span><i class="far fa-calendar"></i> @task.DueDate.Value.ToString("MMM dd")</span>
                                                    }
                                                    <div class="task-assignee">@Model.Username.Substring(0, 2).ToUpper()</div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>

                                <button class="add-task-btn"><i class="fas fa-plus"></i> Add Task</button>
                            </div>

                            <!-- Completed Column -->
                            <div class="kanban-column">
                                <div class="column-header">
                                    <div class="column-title">
                                        <h3>Completed</h3>
                                        <span class="column-badge">@board.Tasks.Count(t => t.Status.Equals("Completed", StringComparison.OrdinalIgnoreCase) || t.Status.Equals("Done", StringComparison.OrdinalIgnoreCase))</span>
                                    </div>
                                </div>

                                <div class="task-list">
                                    @foreach (var task in board.Tasks.Where(t => t.Status.Equals("Completed", StringComparison.OrdinalIgnoreCase) || t.Status.Equals("Done", StringComparison.OrdinalIgnoreCase)))
                                    {
                                        <div class="task-card">
                                            <div class="task-header">
                                                <span class="task-priority priority-low"></span>
                                                <button class="task-menu"><i class="fas fa-ellipsis-h"></i></button>
                                            </div>
                                            <h4 class="task-title">@task.Title</h4>
                                            <p class="task-description">@task.Description</p>
                                            <div class="task-footer">
                                                <div class="task-tags">
                                                    @if (!string.IsNullOrEmpty(task.Tag))
                                                    {
                                                        <span class="task-tag">@task.Tag</span>
                                                    }
                                                </div>
                                                <div class="task-meta">
                                                    @if (task.DueDate.HasValue)
                                                    {
                                                        <span><i class="far fa-calendar"></i> @task.DueDate.Value.ToString("MMM dd")</span>
                                                    }
                                                    <div class="task-assignee">@Model.Username.Substring(0, 2).ToUpper()</div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>

                                <button class="add-task-btn"><i class="fas fa-plus"></i> Add Task</button>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <!-- Board olmayan kategoriler için header -->
                    <header class="dashboard-header">
                        <div class="header-left">
                            
                            <p style="color: #94a3b8; margin-top: 0.5rem;">No boards yet. Create your first board!</p>
                        </div>
                        <div class="header-right">
                            <button class="btn btn-secondary"><i class="fas fa-filter"></i> Filter</button>
                            <button class="btn btn-primary"><i class="fas fa-plus"></i> New Board </button>
                        </div>
                    </header>

                    @await Html.PartialAsync("_Notification")

                    <!-- Boş durum mesajı -->
                    <div style="text-align: center; padding: 4rem 2rem; color: #94a3b8;">
                        <i class="fas fa-folder-open" style="font-size: 4rem; margin-bottom: 1rem; opacity: 0.5;"></i>
                        <h3 style="margin-bottom: 0.5rem;">No boards in this category</h3>
                        <p>Click "New Board" to create your first board</p>
                    </div>
                }
            }
        </main>
    </div>

    <!-- Category Create Pop-up -->
    <div id="categoryModal" class="modal-backdrop" aria-hidden="true">
        <div class="modal">
            <div class="modal-header">
                <h3>New Category</h3>
                <button class="modal-close" aria-label="Close" onclick="closeModal('categoryModal')">
                    <i class="fas fa-times"></i>
                </button>
            </div>

            <form asp-controller="Category" asp-action="Create" method="post" class="modal-body">
                <div class="form-group">
                    <label for="CategoryName">Category Name</label>
                    <input id="CategoryName" name="Name" type="text" placeholder="Example: Personal, Work, School..." required />
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" onclick="closeModal('categoryModal')">Cancel</button>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-check"></i> Create
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Category Edit Pop-up -->
    <div id="editModal" class="modal-backdrop" aria-hidden="true">
        <div class="modal">
            <div class="modal-header">
                <h3>Edit Category</h3>
                <button class="modal-close" aria-label="Close" onclick="closeModal('editModal')">
                    <i class="fas fa-times"></i>
                </button>
            </div>

            <form asp-controller="Category" asp-action="Update" method="post" class="modal-body">
                <input type="hidden" id="EditCategoryId" name="CategoryId" value="" />
                <div class="form-group">
                    <label for="EditCategoryName">New Category Name</label>
                    <input id="EditCategoryName" name="NewCategoryName" type="text" placeholder="Example: Personal, Work, School..." required />
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" onclick="closeModal('editModal')">Cancel</button>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-check"></i> Update
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Category Delete Pop-up -->
    <div id="deleteModal" class="modal-backdrop" aria-hidden="true">
        <div class="modal">
            <div class="modal-header">
                <h3>Delete Category</h3>
                <button class="modal-close" aria-label="Close" onclick="closeModal('deleteModal')">
                    <i class="fas fa-times"></i>
                </button>
            </div>

            <form asp-controller="Category" asp-action="Delete" method="post" class="modal-body">
                <input type="hidden" id="DeleteCategoryId" name="CategoryId" value="" />
                <div class="form-group">
                    <label for="DeleteCategoryName">Category Name</label>
                    <input id="DeleteCategoryName" name="CategoryName" type="text" readonly />
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" onclick="closeModal('deleteModal')">Cancel</button>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-check"></i> Delete
                    </button>
                </div>
            </form>
        </div>
    </div>

    <script>
        // Sidebar toggle
        function toggleSidebar() {
            const sidebar = document.getElementById('sidebar');
            sidebar.classList.toggle('open');
        }

        // TEK MODAL KAPATMA FONKSİYONU - Tüm modaller için kullanılır
        function closeModal(modalId) {
            const modal = document.getElementById(modalId);
            modal.classList.remove('open');
            modal.setAttribute('aria-hidden', 'true');
        }

        // Modal açma ve kapatma - Category Create
        document.addEventListener("DOMContentLoaded", function () {
            const categoryModal = document.getElementById('categoryModal');
            const editModal = document.getElementById('editModal');
            const deleteModal = document.getElementById('deleteModal');

            // Category Create Modal
            window.openCategoryModal = function () {
                document.getElementById('CategoryName').value = '';
                categoryModal.classList.add('open');
                categoryModal.setAttribute('aria-hidden', 'false');
                setTimeout(() => document.getElementById('CategoryName').focus(), 50);
            };

            // Category Edit Modal
            window.editCategory = function (categoryId, currentName) {
                document.getElementById('EditCategoryId').value = categoryId;
                document.getElementById('EditCategoryName').value = currentName;
                editModal.classList.add('open');
                editModal.setAttribute('aria-hidden', 'false');
                setTimeout(() => document.getElementById('EditCategoryName').focus(), 50);
            };

            // Category Delete Modal
            window.deleteCategory = function (categoryId, categoryName) {
                document.getElementById('DeleteCategoryId').value = categoryId;
                document.getElementById('DeleteCategoryName').value = categoryName;
                deleteModal.classList.add('open');
                deleteModal.setAttribute('aria-hidden', 'false');
            };

            // Modal dışına tıklayınca kapatma
            [categoryModal, editModal, deleteModal].forEach(modal => {
                modal.addEventListener('click', (e) => {
                    if (e.target === modal) {
                        closeModal(modal.id);
                    }
                });
            });

            // ESC tuşu ile kapatma
            document.addEventListener('keydown', (e) => {
                if (e.key === 'Escape') {
                    if (categoryModal.classList.contains('open')) closeModal('categoryModal');
                    if (editModal.classList.contains('open')) closeModal('editModal');
                    if (deleteModal.classList.contains('open')) closeModal('deleteModal');
                }
            });
        });

        // Dropdown menü işlemleri
        let activeDropdown = null;

        function toggleDropdown(event, index) {
            event.preventDefault();
            event.stopPropagation();

            const dropdown = document.getElementById(`dropdown-${index}`);

            if (activeDropdown && activeDropdown !== dropdown) {
                activeDropdown.classList.remove('open');
            }

            dropdown.classList.toggle('open');
            activeDropdown = dropdown.classList.contains('open') ? dropdown : null;
        }

        function closeAllDropdowns() {
            document.querySelectorAll('.category-dropdown').forEach(dropdown => {
                dropdown.classList.remove('open');
            });
            activeDropdown = null;
        }

        document.addEventListener('click', function(event) {
            if (!event.target.closest('.category-menu-btn') && !event.target.closest('.category-dropdown')) {
                closeAllDropdowns();
            }
        });

        document.querySelectorAll('.category-link').forEach(link => {
            link.addEventListener('click', function(event) {
                if (event.target.closest('.category-menu-btn')) {
                    event.preventDefault();
                }
            });
        });
    </script>
</body>
</html>